[1]舉例說明　傳值呼叫(call by value)　與　參考呼叫(call by reference)
當我們創造變數並給值時，變數會指向值在電腦記憶體中的位置，若我們以這個值為參照，
指定另一個變數指向這個值時，電腦會在記憶體中新增(複製)一個新值，讓後來的這個變數指向新的值。

public static void main (String[]args){
int a=10,b=15;
System.out,println("傳值呼叫前\t a ="+a+"\t b="+b);
byVal(a,b);
System.out.println(傳值呼叫後\t a="+a+"\t b="+b);
}
static void byVal(int x,int y){
int t;
t=x;
x=y;
y=t;
System.out.println("傳值呼叫中\t x+"+x+"\t y ="+y);
}
}
#結果
傳值呼叫前 a=10 b=15
傳值呼叫中 x=15 y=10
傳值呼叫後 a=10 b=15

參考呼叫 
物件存放的記憶體位置，而存在這個變數內的就是這個「記憶體位置」。因此這個「以記憶體位置為參考」而在變數間傳遞的存取行為

class Obj{
int a,b;
Obj(){
a=10;
b=15;
}
}
public class CallByRef{
public Static void main(String [] args){
Obj obj=new Obj();
Ststem.out.println("參考呼叫前\t a="+obj,a+"\tb="+obj.b);
byRef(obj);
Ststem.out.println("參考呼叫後\t a="+obj,a+"\tb="+obj.b);
}
Static void byRef(Obj p){
int t;
t=p.a;
p.a=p.b;
p.b=t;
}
#結果
參考呼叫前 a=10 b=15
參考呼叫後 a=15 b=10
[2]舉例說明　方法多載

在同一個類別中可以使用相同名稱 但後面所接引數必須是資料不同個數順序不同

void methed(){}
int methed(){}                //不能多載:雖然傳回值不同但引數個數相同
void methed(int a){}          //成功多載:比第一行的方法多一個引數
void methed(int b){}          //不能多載:引數名稱不同,但和第三行的型別和個數相同
void methed(String s){}       //成功多載:雖然和第三行引數個數相同但型別不同
void methed(int a,String s){} //成功多載:引數個數和型別都不同
void methed(String s,int a){} //成功多載:和第六行引數個數和型別相同但順序不同

public class addNum{
 public static void main (string [] args){
 int total1,x=17,y=28;
 double total2,i=3.8,j=22.7,k=15.1;
 total1=add(x,y);
 total2=add(i,j,k);
 System.out.printf("%d%n",total1);
 System.out.printf("%f%n",total2);
 }
 static int add(int a,int b){
 return a+b;
 }
 static int add(double a,double b,double c){
 return a+b+c;
 }
 }
 ---------------------------------------------------------------------------
 (1)請使用靜態遞迴方法算出費氏數列。

import java.util.Scanner;

public class test {

public static void main(String args[]){
 	int num ;
 	Scanner s = new Scanner(System.in);
 	System.out.print("請輸入費氏數列項數n：");
 	num = s.nextInt();
 	System.out.println("費氏數列第"+num+"項數的值為"+fib(num));
}
public static int fib(int n) {

switch (n) {
    case 0:
        return 0;
    case 1:
        return 1;
    default:
        return fib(n - 1) + fib(n - 2);
}
} 
}

(2)請使用 iterative方法算出費氏數列。

import java.util.Scanner;

public class test {

public static void main(String args[]) {
 	int num ;
 	Scanner s = new Scanner(System.in);
 	System.out.print("計算費氏數列的第X項，請輸入X：");
 	num = s.nextInt();
 	System.out.println("費氏數列的第"+num+"項:"+fib(num));
}
public static int fib(int n) {

int init = 0;
int accumulator = 1;

for (int t = 1; t < n; ++t) {
    int temp = accumulator;
    accumulator += init;

    init = temp;
}

return accumulator;
} }
